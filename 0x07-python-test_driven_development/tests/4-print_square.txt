# 4-print_square.txt

 How to Use 4-print_square.py
===============================

Only handles one function called
``print_square()``.

Numbers
=======

``print_square()`` Print a square with a character #.

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(3)
    ###
    ###
    ###
    >>> print_square(8)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    >>> print_square(0)
    

float values raise error message TypeError.

::

    >>> print_square(1.0)
    Traceback (most recent call last):
    TypeError: size must be an integer
    >>> print_square(-2.7)
    Traceback (most recent call last):
    TypeError: size must be an integer

Non-Numbers
===========

Raise error message when one of the variables are not a positive
integers

::

    >>> print_square('c')
    Traceback (most recent call last):
    TypeError: size must be an integer

    >>> print_square("Hello")
    Traceback (most recent call last):
    TypeError: size must be an integer

    >>> print_square("World")
    Traceback (most recent call last):
    TypeError: size must be an integer

    >>> print_square('H')
    Traceback (most recent call last):
    TypeError: size must be an integer

    >>> print_square(-8)
    Traceback (most recent call last):
    ValueError: size must be >= 0

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required argument: 'size'
